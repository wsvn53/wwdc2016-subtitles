WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:26.516 --> 00:00:31.646 A:middle
[ Applause ]

00:00:32.146 --> 00:00:33.376 A:middle
&gt;&gt; Hello everyone.

00:00:33.876 --> 00:00:35.416 A:middle
Welcome to Session 230.

00:00:35.616 --> 00:00:39.166 A:middle
I'm Sirisha, an engineer
on CallKit and I'm joined

00:00:39.166 --> 00:00:41.466 A:middle
by my colleagues,
Stuart and Nick.

00:00:41.466 --> 00:00:44.866 A:middle
And we are excited to introduce
a brand new framework today,

00:00:45.486 --> 00:00:45.966 A:middle
CallKit.

00:00:49.156 --> 00:00:51.886 A:middle
A lot of you here have
created VoIP apps before.

00:00:52.846 --> 00:00:54.836 A:middle
You have changed the
face of telephony

00:00:55.126 --> 00:00:56.736 A:middle
and have made the world smaller.

00:00:57.886 --> 00:01:02.006 A:middle
And you want your app to be
the primary way your users make


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.886 --> 00:01:02.006 A:middle
And you want your app to be
the primary way your users make

00:01:02.006 --> 00:01:05.196 A:middle
and receive calls on
iOS and we want to help.

00:01:06.286 --> 00:01:07.766 A:middle
CallKit is a framework
that's going

00:01:07.766 --> 00:01:09.946 A:middle
to elevate your third
party VoIP apps

00:01:10.226 --> 00:01:11.756 A:middle
to a first party experience.

00:01:12.516 --> 00:01:18.556 A:middle
[ Applause ]

00:01:19.056 --> 00:01:19.516 A:middle
Thank you.

00:01:20.216 --> 00:01:22.536 A:middle
So while a lot of you
have created VoIP apps,

00:01:22.776 --> 00:01:25.226 A:middle
for the next 40 minutes
let's assume that you

00:01:25.226 --> 00:01:28.166 A:middle
and I have created a brand
new app called Speakerbox.

00:01:28.836 --> 00:01:31.606 A:middle
So Speakerbox is a
simple app that can make

00:01:31.606 --> 00:01:36.096 A:middle
and receive voice calls on
iOS as iOS exists today.

00:01:36.806 --> 00:01:39.846 A:middle
So before we take a look, let
me setup the stage for you.

00:01:40.486 --> 00:01:42.326 A:middle
So Jane has been
traveling around Europe

00:01:42.326 --> 00:01:45.376 A:middle
and her concerned parents
are trying to reach her

00:01:45.376 --> 00:01:46.646 A:middle
to make sure she's doing okay.

00:01:47.666 --> 00:01:50.316 A:middle
But because she's international
they're using Speakerbox

00:01:50.396 --> 00:01:51.376 A:middle
to make calls to her.

00:01:52.206 --> 00:01:55.816 A:middle
So let's see how an incoming
call to Jane looks like today.

00:01:56.376 --> 00:01:58.846 A:middle
So this is Jane's locked screen.

00:01:59.646 --> 00:02:01.746 A:middle
And at first, she gets
an iMessage from Dad.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.646 --> 00:02:01.746 A:middle
And at first, she gets
an iMessage from Dad.

00:02:02.326 --> 00:02:04.016 A:middle
And before she could
even respond,

00:02:04.156 --> 00:02:05.806 A:middle
she gets an incoming
call from mom.

00:02:06.326 --> 00:02:09.235 A:middle
Jane can't discern
the difference

00:02:09.235 --> 00:02:12.926 A:middle
between this incoming
iMessage notification

00:02:13.026 --> 00:02:15.556 A:middle
and the incoming phone
call notification

00:02:16.266 --> 00:02:19.216 A:middle
because that's just what
VoIP calls are today.

00:02:19.536 --> 00:02:20.846 A:middle
Just a notification.

00:02:21.736 --> 00:02:23.976 A:middle
And if Jane wants to
actually answer this call,

00:02:24.356 --> 00:02:27.626 A:middle
she has to slide on
Speakerbox, type in password,

00:02:27.876 --> 00:02:30.676 A:middle
and then that gets
her taken to the app

00:02:30.676 --> 00:02:31.966 A:middle
and then she can begin speaking.

00:02:32.386 --> 00:02:36.276 A:middle
And this is Jane's
unlocked screen

00:02:36.316 --> 00:02:38.496 A:middle
and the experience
is just as bad.

00:02:39.546 --> 00:02:41.126 A:middle
She gets an incoming
call from Mom.

00:02:43.016 --> 00:02:45.286 A:middle
Did you miss that
notification by any chance?

00:02:46.496 --> 00:02:47.076 A:middle
That's right.

00:02:47.076 --> 00:02:49.746 A:middle
It was just a banner
from the top.

00:02:49.876 --> 00:02:53.316 A:middle
So wouldn't it be nice if
instead the incoming call

00:02:53.316 --> 00:02:55.856 A:middle
to Jane looked more like this?

00:02:56.866 --> 00:02:58.486 A:middle
This is Jane's locked
screen still.

00:02:59.246 --> 00:03:00.946 A:middle
And she gets an incoming
call from Mom.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.246 --> 00:03:00.946 A:middle
And she gets an incoming
call from Mom.

00:03:01.656 --> 00:03:03.896 A:middle
Notice the full screen
Native UI.

00:03:04.516 --> 00:03:08.466 A:middle
[ Applause ]

00:03:08.966 --> 00:03:11.636 A:middle
And Jane can just
slide to answer

00:03:11.636 --> 00:03:13.026 A:middle
and start talking to her mom.

00:03:13.546 --> 00:03:18.616 A:middle
And from the unlock
screen, it's the same, rich,

00:03:18.856 --> 00:03:21.536 A:middle
Native UI with answer
and decline buttons

00:03:21.796 --> 00:03:23.776 A:middle
and your custom ringtone
playing.

00:03:25.516 --> 00:03:29.546 A:middle
[ Applause ]

00:03:30.046 --> 00:03:32.786 A:middle
And wouldn't it be nice if
VoIP calls could interplay

00:03:32.786 --> 00:03:34.176 A:middle
with other calls on the systems?

00:03:35.106 --> 00:03:38.386 A:middle
Perhaps at the telephony
call or a FaceTime audio call

00:03:38.786 --> 00:03:40.586 A:middle
or maybe another VoIP call?

00:03:41.126 --> 00:03:46.676 A:middle
And even have VoIP calls get
started from recents, favorites,

00:03:46.906 --> 00:03:50.146 A:middle
and even get assigned
to contacts.

00:03:50.146 --> 00:03:53.056 A:middle
And get started from
Siri, Bluetooth,

00:03:53.586 --> 00:03:58.076 A:middle
and even get do not disturb
and blocked functionality.

00:03:58.856 --> 00:04:00.046 A:middle
That is CallKit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.856 --> 00:04:00.046 A:middle
That is CallKit.

00:04:01.516 --> 00:04:09.086 A:middle
[ Applause ]

00:04:09.586 --> 00:04:10.256 A:middle
All right.

00:04:10.476 --> 00:04:13.006 A:middle
So today we're going to go over
the architecture of CallKit

00:04:13.426 --> 00:04:17.096 A:middle
and incoming call flow, and
outgoing call flow, and then end

00:04:17.096 --> 00:04:19.745 A:middle
with some more details
about the API.

00:04:19.745 --> 00:04:20.586 A:middle
So let's get started.

00:04:21.505 --> 00:04:21.815 A:middle
All right.

00:04:21.815 --> 00:04:25.416 A:middle
So over here, we have all our
system services like Bluetooth,

00:04:25.416 --> 00:04:27.916 A:middle
Siri, CarPlay, and
then our Native UI.

00:04:28.566 --> 00:04:31.926 A:middle
And over here, we have all
our VoIP apps like Speakerbox.

00:04:32.616 --> 00:04:34.416 A:middle
These are two separate
entities right now.

00:04:34.876 --> 00:04:37.176 A:middle
Calls made on Speakerbox
are non known to our system

00:04:37.176 --> 00:04:38.656 A:middle
and then our services.

00:04:39.516 --> 00:04:42.486 A:middle
In iOS 10, we have
adopted CallKit

00:04:42.526 --> 00:04:44.186 A:middle
in all our system services.

00:04:44.876 --> 00:04:46.616 A:middle
So now calls made on
Bluetooth are known

00:04:46.616 --> 00:04:49.076 A:middle
to our system UI via CallKit.

00:04:49.776 --> 00:04:52.596 A:middle
So if Speakerbox wants
a similar experience,

00:04:52.766 --> 00:04:54.306 A:middle
it needs to adopt CallKit.

00:04:55.276 --> 00:04:57.596 A:middle
So now calls made on
Speakerbox will get known

00:04:57.596 --> 00:04:58.916 A:middle
to our system via CallKit

00:04:59.416 --> 00:05:02.186 A:middle
and then system can
publish these calls


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.416 --> 00:05:02.186 A:middle
and then system can
publish these calls

00:05:02.216 --> 00:05:03.586 A:middle
to the rest of our services.

00:05:04.636 --> 00:05:07.446 A:middle
So let's talk a little
bit more about Speakerbox.

00:05:07.956 --> 00:05:11.676 A:middle
So here we have Speakerbox
and all of its code.

00:05:12.086 --> 00:05:15.066 A:middle
It talks to its network
and has its own app UI

00:05:15.066 --> 00:05:17.256 A:middle
and we're going to link CallKit.

00:05:18.586 --> 00:05:21.366 A:middle
So there are two primary classes
in CallKit that we care about.

00:05:22.126 --> 00:05:24.406 A:middle
The first is the CXProvider.

00:05:24.936 --> 00:05:28.046 A:middle
So the provider is the class
that Speakerbox will use

00:05:28.096 --> 00:05:29.826 A:middle
to let the system about any

00:05:30.176 --> 00:05:32.326 A:middle
out of band notifications
that have happened.

00:05:33.416 --> 00:05:36.326 A:middle
The second class is
the CXCallController.

00:05:37.076 --> 00:05:40.066 A:middle
The CXCallController is the
class that Speakerbox will use

00:05:40.066 --> 00:05:43.016 A:middle
to let the system know
about local user actions.

00:05:44.396 --> 00:05:46.076 A:middle
So let's take a deeper look

00:05:46.076 --> 00:05:48.546 A:middle
at these two classes
starting with the provider.

00:05:48.956 --> 00:05:52.326 A:middle
So the provider, like I
said earlier, is the class

00:05:52.326 --> 00:05:54.366 A:middle
that we use to let the
system know about out

00:05:54.366 --> 00:05:55.666 A:middle
of band notifications.

00:05:56.136 --> 00:05:58.696 A:middle
That is these are
not user actions

00:05:59.266 --> 00:06:02.206 A:middle
but actually external
events like, for example,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.266 --> 00:06:02.206 A:middle
but actually external
events like, for example,

00:06:02.206 --> 00:06:03.946 A:middle
an incoming call
coming to Speakerbox.

00:06:04.976 --> 00:06:07.326 A:middle
Contrasts this with
the CXCallController.

00:06:07.966 --> 00:06:11.516 A:middle
The CXCallController is the
class that Speakerbox will use

00:06:11.566 --> 00:06:14.166 A:middle
to let the system
know about requests

00:06:14.166 --> 00:06:15.856 A:middle
from within the app itself.

00:06:16.356 --> 00:06:18.586 A:middle
That is these are
actually user actions

00:06:19.736 --> 00:06:22.836 A:middle
and like internal events,
like a start call action.

00:06:24.096 --> 00:06:27.506 A:middle
By using the CallController,
Speakerbox gets to interplay

00:06:27.506 --> 00:06:29.076 A:middle
with other calls on the system.

00:06:30.336 --> 00:06:33.096 A:middle
Say, for example, there's
already an active telephony call

00:06:33.096 --> 00:06:36.166 A:middle
and the user wants to
start a Speakerbox call

00:06:36.286 --> 00:06:37.576 A:middle
from Speakerbox's UI.

00:06:37.576 --> 00:06:42.396 A:middle
By using the controller,
the system gets to know

00:06:42.396 --> 00:06:43.456 A:middle
about the start call action

00:06:43.456 --> 00:06:46.576 A:middle
and then the system can
tell the telephony provider

00:06:46.576 --> 00:06:50.576 A:middle
to hold its call so as to let
the Speakerbox start its call.

00:06:52.076 --> 00:06:54.496 A:middle
So let's take a look at
some examples of this.

00:06:55.046 --> 00:06:57.976 A:middle
So the provider is
used to report

00:06:58.276 --> 00:06:59.996 A:middle
out of band notifications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.326 --> 00:07:03.136 A:middle
Like, for example, an incoming
call coming to Speakerbox

00:07:04.076 --> 00:07:06.316 A:middle
or maybe an outgoing
call getting connected.

00:07:07.016 --> 00:07:10.006 A:middle
Or that outgoing call
ending on the remote side.

00:07:11.196 --> 00:07:14.616 A:middle
Whereas the controller is
used to request actions

00:07:14.866 --> 00:07:17.656 A:middle
from the system like
the user wanting

00:07:17.656 --> 00:07:21.186 A:middle
to start an outgoing call or the
user wanting to answer the call

00:07:21.186 --> 00:07:25.456 A:middle
from Speakerbox or maybe ending
the call from within Speakerbox.

00:07:27.236 --> 00:07:29.636 A:middle
So when the provider
wants to communicate

00:07:29.636 --> 00:07:33.726 A:middle
to the system it uses
the CSXCallUpdate class.

00:07:34.346 --> 00:07:36.486 A:middle
And when the system
wants to let Speakerbox

00:07:36.486 --> 00:07:40.626 A:middle
about any user interactions,
it uses the CXAction classes

00:07:40.746 --> 00:07:41.896 A:middle
to let Speakerbox know.

00:07:41.896 --> 00:07:45.226 A:middle
And the controller communicates

00:07:45.226 --> 00:07:49.276 A:middle
to the system user actions
bundled up into a CSTransaction

00:07:49.806 --> 00:07:51.946 A:middle
to let the system to know
about these user actions.

00:07:52.176 --> 00:07:55.716 A:middle
So that was a lot
of information.

00:07:55.986 --> 00:07:59.686 A:middle
So let's take a look all of
that in an incoming call flow.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.086 --> 00:08:03.596 A:middle
So here we have Speakerbox
and Jane gets

00:08:03.596 --> 00:08:04.976 A:middle
that incoming call from Mom.

00:08:05.436 --> 00:08:07.436 A:middle
The incoming call
comes to Speakerbox

00:08:07.736 --> 00:08:10.536 A:middle
and then Speakerbox
creates a CXCallUpdate

00:08:10.916 --> 00:08:13.106 A:middle
and using the provider
sends that to the system.

00:08:13.746 --> 00:08:16.526 A:middle
And then the system can then
publish that incoming call

00:08:16.526 --> 00:08:18.686 A:middle
to all our services
including our UI.

00:08:20.006 --> 00:08:23.026 A:middle
And if Jane wants to answer
the call from within our UI,

00:08:23.626 --> 00:08:25.836 A:middle
the answer action
comes to our system.

00:08:26.366 --> 00:08:30.266 A:middle
Our system can then tell
Speakerbox, we have the provider

00:08:30.706 --> 00:08:33.166 A:middle
to the CXAnswerCallAction

00:08:33.996 --> 00:08:37.275 A:middle
and then Speakerbox can answer
the call however it needs.

00:08:38.275 --> 00:08:40.525 A:middle
And if Jane now wants
to end that call

00:08:40.525 --> 00:08:42.916 A:middle
from within the app's own UI,

00:08:42.916 --> 00:08:45.256 A:middle
the end action comes
to the controller.

00:08:45.606 --> 00:08:47.986 A:middle
The controller bundles it
up into a CXTransaction

00:08:47.986 --> 00:08:51.936 A:middle
and that comes to the system
and if everything looks okay,

00:08:52.326 --> 00:08:55.076 A:middle
the system sends that back up to
the Speakerbox via the provider

00:08:55.076 --> 00:08:58.736 A:middle
and then Speakerbox can
end the call as necessary.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.216 --> 00:09:00.796 A:middle
All right.

00:09:00.796 --> 00:09:02.966 A:middle
Now let's take a look all of
that in a demo with Stuart.

00:09:03.516 --> 00:09:08.266 A:middle
[ Applause ]

00:09:08.766 --> 00:09:09.476 A:middle
&gt;&gt; Thanks, Sirisha.

00:09:09.976 --> 00:09:12.546 A:middle
So now that you've heard
about the benefits of CallKit,

00:09:12.946 --> 00:09:14.676 A:middle
I'd like to show
you how to adopt it

00:09:14.676 --> 00:09:17.896 A:middle
in an existing VoIP
application, the Speakerbox app

00:09:17.986 --> 00:09:18.896 A:middle
which Sirisha mentioned.

00:09:19.446 --> 00:09:22.596 A:middle
I'll first show you how to adopt
it to handle an incoming call.

00:09:23.796 --> 00:09:26.816 A:middle
So I'll first open up the
Speakerbox Xscript Project.

00:09:27.396 --> 00:09:32.186 A:middle
Now before I dive into
adopting CallKit in this app,

00:09:32.586 --> 00:09:33.486 A:middle
let me just show
you a little bit

00:09:33.486 --> 00:09:34.796 A:middle
about how the app is structured

00:09:34.796 --> 00:09:35.846 A:middle
so you have a frame
of reference.

00:09:36.646 --> 00:09:39.076 A:middle
So we have two main classes
in the app right now.

00:09:39.836 --> 00:09:43.496 A:middle
The SpeakerboxCallManager class
which maintains a list of calls

00:09:43.496 --> 00:09:45.646 A:middle
in the app and has
certain operations

00:09:45.746 --> 00:09:48.836 A:middle
such as starting a
call and ending a call.

00:09:50.156 --> 00:09:52.996 A:middle
And our other primary
class is SpeakerboxCall.

00:09:53.586 --> 00:09:56.576 A:middle
This is our model class which
represents a single call

00:09:56.576 --> 00:09:59.306 A:middle
in the app and has
metadata about it as well

00:09:59.306 --> 00:10:01.506 A:middle
as some call back blocks
so we can be notified


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.306 --> 00:10:01.506 A:middle
as some call back blocks
so we can be notified

00:10:01.506 --> 00:10:05.896 A:middle
about the life cycle events
of the call as it progresses.

00:10:05.896 --> 00:10:09.496 A:middle
So like Sirisha mentioned,
the first we need to do

00:10:09.496 --> 00:10:11.136 A:middle
when adopting CallKit is

00:10:11.136 --> 00:10:13.856 A:middle
to create a CXProvider
and set its delegate.

00:10:14.526 --> 00:10:16.906 A:middle
So I'll do that by
creating a new file

00:10:17.716 --> 00:10:18.666 A:middle
called ProviderDelegate.

00:10:23.536 --> 00:10:26.206 A:middle
So into this new file,
I'll bring in some code

00:10:26.206 --> 00:10:28.106 A:middle
that we've already
written but let me walk you

00:10:28.106 --> 00:10:29.666 A:middle
through what this is doing.

00:10:29.976 --> 00:10:32.886 A:middle
So in our initializer
we pass in a reference

00:10:32.936 --> 00:10:34.706 A:middle
to the SpeakerboxCallManager
class.

00:10:35.336 --> 00:10:38.566 A:middle
This allows the ProviderDelegate
to access the app's list

00:10:38.566 --> 00:10:42.406 A:middle
of calls and references them
by UUID which we'll show later.

00:10:43.676 --> 00:10:46.796 A:middle
Next, we have -- we create
a CXProvider instance

00:10:47.346 --> 00:10:50.196 A:middle
and we pass it -- something
called a provider configuration

00:10:50.196 --> 00:10:50.806 A:middle
which we see here.

00:10:51.646 --> 00:10:53.836 A:middle
The provider configuration
is something we'll go

00:10:53.836 --> 00:10:57.256 A:middle
into more detail later in the
session but this allows our app

00:10:57.446 --> 00:10:59.316 A:middle
to configure to the
system a few options

00:10:59.316 --> 00:11:01.666 A:middle
about how it should behave.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.316 --> 00:11:01.666 A:middle
about how it should behave.

00:11:01.806 --> 00:11:05.446 A:middle
Now back in our initializer, we
set this class as the delegate

00:11:05.446 --> 00:11:08.636 A:middle
of our provider and
then if necessary,

00:11:09.176 --> 00:11:11.396 A:middle
we request authorization
to use the provider.

00:11:12.556 --> 00:11:15.776 A:middle
So great. So now we have our
provider and our delegate set

00:11:15.776 --> 00:11:18.086 A:middle
but we need to create
this in our app delegate.

00:11:18.936 --> 00:11:21.326 A:middle
So I'll declare a property
for our provider delegate

00:11:21.326 --> 00:11:25.846 A:middle
and I'll instantiate that in
the application did finishing

00:11:25.846 --> 00:11:27.056 A:middle
launching with options method.

00:11:27.986 --> 00:11:31.366 A:middle
Cool. So now we have
a provider in our app.

00:11:31.366 --> 00:11:34.996 A:middle
How does the app respond
to an incoming call?

00:11:35.566 --> 00:11:37.896 A:middle
So if I scroll down, we can see

00:11:37.896 --> 00:11:40.276 A:middle
that the app currently
uses PushKit to learn

00:11:40.276 --> 00:11:43.046 A:middle
about an incoming call
via push notification.

00:11:43.596 --> 00:11:45.356 A:middle
And if we look at what
this code is doing,

00:11:46.166 --> 00:11:48.416 A:middle
we can see that it looks
at the dictionaryPayload

00:11:48.416 --> 00:11:50.956 A:middle
from our push notification
and gets some metadata

00:11:50.956 --> 00:11:54.636 A:middle
about the incoming call
such as UUID and handle

00:11:54.636 --> 00:11:57.686 A:middle
which is an identifier
representing who's calling.

00:11:57.866 --> 00:12:01.366 A:middle
And then we call the
display incoming call method


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.866 --> 00:12:01.366 A:middle
And then we call the
display incoming call method

00:12:01.956 --> 00:12:03.526 A:middle
and we can see here that this is

00:12:03.526 --> 00:12:06.526 A:middle
where the app hosts the
local notification for --

00:12:06.686 --> 00:12:08.616 A:middle
to show the user
that incoming call.

00:12:09.606 --> 00:12:12.226 A:middle
But when using CallKit
we no longer have to rely

00:12:12.226 --> 00:12:14.236 A:middle
on a local notification
to show this.

00:12:14.756 --> 00:12:18.336 A:middle
We can, instead, use the
system's full screen native

00:12:18.336 --> 00:12:21.276 A:middle
incoming call UI and we want
to do instead because it's

00:12:21.276 --> 00:12:22.686 A:middle
so much richer of an experience.

00:12:23.466 --> 00:12:26.656 A:middle
So to do that, I'll go back
to the ProviderDelegate

00:12:26.656 --> 00:12:28.726 A:middle
and I'm going to
create the helper method

00:12:29.336 --> 00:12:32.056 A:middle
which will allow us to call
the API on our provider.

00:12:33.296 --> 00:12:37.476 A:middle
I'll call that report
IncomingCall and in this method,

00:12:38.256 --> 00:12:40.946 A:middle
I'll start by creating
a CXCallUpdate

00:12:41.406 --> 00:12:44.226 A:middle
which contains metadata to
represent that incoming call.

00:12:45.386 --> 00:12:48.226 A:middle
And then we'll call the
report NewIncomingCall method

00:12:48.226 --> 00:12:51.586 A:middle
on our provider and this is the
step that notifies the system

00:12:51.586 --> 00:12:52.666 A:middle
about that incoming call.

00:12:53.966 --> 00:12:57.816 A:middle
Now, in the completion block,
we'll check if there is an error

00:12:58.626 --> 00:13:01.736 A:middle
and if there wasn't, we create
a SpeakerboxCall instance


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.626 --> 00:13:01.736 A:middle
and if there wasn't, we create
a SpeakerboxCall instance

00:13:01.736 --> 00:13:05.656 A:middle
and configure it and we add that
call to our app's list of calls.

00:13:06.376 --> 00:13:08.676 A:middle
We'll go into more detail
later in the session

00:13:08.676 --> 00:13:11.416 A:middle
about why there could be an
error here but suffice it

00:13:11.416 --> 00:13:13.266 A:middle
to say, there's certain
conditions

00:13:13.266 --> 00:13:15.746 A:middle
in which the device
will not be prepared

00:13:15.746 --> 00:13:16.846 A:middle
to accept an incoming call.

00:13:18.206 --> 00:13:20.346 A:middle
Okay. So now that we
have this helper method

00:13:20.346 --> 00:13:23.206 A:middle
on our ProviderDelegate, I'll
go back to my app delegate

00:13:23.856 --> 00:13:26.646 A:middle
and just replace this code that
posted the local notification

00:13:27.096 --> 00:13:28.676 A:middle
with a call to our helper.

00:13:29.896 --> 00:13:32.706 A:middle
So great. So now
we're using CallKit

00:13:33.086 --> 00:13:35.196 A:middle
to report an incoming
call that we learned

00:13:35.196 --> 00:13:37.566 A:middle
about from a push
notification to the system

00:13:37.686 --> 00:13:40.706 A:middle
and the system is showing the
full screen Native incoming

00:13:40.706 --> 00:13:41.086 A:middle
call UI.

00:13:41.696 --> 00:13:45.096 A:middle
Well what happens when the
user presses that green button

00:13:45.166 --> 00:13:46.486 A:middle
and answers the incoming call?

00:13:47.836 --> 00:13:48.656 A:middle
When that happens,

00:13:48.656 --> 00:13:51.996 A:middle
our ProviderDelegate will
receive another method

00:13:52.196 --> 00:13:53.126 A:middle
that we need to implement.

00:13:54.006 --> 00:13:58.966 A:middle
And that is the
ProviderPerformAnswerCallAction

00:13:58.966 --> 00:13:59.336 A:middle
method.

00:13:59.926 --> 00:14:01.246 A:middle
Let me walk through
what this is doing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.926 --> 00:14:01.246 A:middle
Let me walk through
what this is doing.

00:14:02.016 --> 00:14:04.206 A:middle
So we start by getting
an instance

00:14:04.246 --> 00:14:07.476 A:middle
of our Speakerbox call class
corresponding to the UUID

00:14:07.476 --> 00:14:08.726 A:middle
of the call that
we're answering.

00:14:09.986 --> 00:14:13.096 A:middle
Next, we call the answer
Speakerbox call method

00:14:13.096 --> 00:14:17.006 A:middle
and this is some code that
was elsewhere app prior to now

00:14:17.326 --> 00:14:19.016 A:middle
and this talks to our
network to tell it

00:14:19.016 --> 00:14:20.036 A:middle
to actually answer that call.

00:14:20.576 --> 00:14:22.976 A:middle
And now we do it here in our
ProviderDelegate call back.

00:14:24.176 --> 00:14:27.076 A:middle
And last, we call
fulfill on our action.

00:14:27.646 --> 00:14:30.976 A:middle
In CallKit, every action
must either be fulfilled

00:14:30.976 --> 00:14:33.736 A:middle
if it was successful or
failed it there was an error

00:14:33.736 --> 00:14:34.556 A:middle
in processing in that.

00:14:35.216 --> 00:14:37.506 A:middle
And we can actually see
a few lines above here,

00:14:38.026 --> 00:14:41.166 A:middle
if we were unable to find a
Speakerbox call for this UUID,

00:14:41.406 --> 00:14:43.066 A:middle
we call the failed
method on our action

00:14:43.256 --> 00:14:44.506 A:middle
to indicate that to the system.

00:14:44.916 --> 00:14:49.686 A:middle
So this method handles
answering the call but what

00:14:49.686 --> 00:14:51.266 A:middle
about when the user
wants to end the call?

00:14:52.206 --> 00:14:56.106 A:middle
For that, we have a similar
delegate method called

00:14:56.526 --> 00:14:58.686 A:middle
ProviderPerformEndCallAction.

00:14:59.546 --> 00:15:00.596 A:middle
And this is very similar.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.546 --> 00:15:00.596 A:middle
And this is very similar.

00:15:01.076 --> 00:15:03.846 A:middle
It looks up a call
based on the UUID.

00:15:04.356 --> 00:15:07.706 A:middle
It talks to our network using
endSpeakerBoxCall method.

00:15:08.696 --> 00:15:10.206 A:middle
It signals that that
was successful

00:15:10.206 --> 00:15:11.686 A:middle
to the system by
calling fulfill.

00:15:12.556 --> 00:15:15.086 A:middle
And it removes the call from
the app's list of calls.

00:15:16.196 --> 00:15:18.626 A:middle
So we're almost done
handling the incoming call

00:15:19.026 --> 00:15:20.646 A:middle
but there's one other
thing we need to consider

00:15:20.846 --> 00:15:22.366 A:middle
when handling that
incoming call.

00:15:22.616 --> 00:15:24.346 A:middle
And that is our call's audio.

00:15:25.366 --> 00:15:28.836 A:middle
So when using CallKit, you will
no longer activate your app's

00:15:28.836 --> 00:15:30.176 A:middle
audio session directly.

00:15:30.796 --> 00:15:33.656 A:middle
Instead you will only
configure the audio session

00:15:34.016 --> 00:15:36.206 A:middle
and the system will actually
activate your app's audio

00:15:36.206 --> 00:15:38.276 A:middle
session for you at
an elevated priority.

00:15:39.016 --> 00:15:42.286 A:middle
So let me show you
how that works.

00:15:42.436 --> 00:15:45.746 A:middle
Back in our
PerformAnswerCallAction method,

00:15:46.776 --> 00:15:49.366 A:middle
I'll insert a call to
this function configure

00:15:49.366 --> 00:15:50.126 A:middle
audio session.

00:15:51.066 --> 00:15:52.816 A:middle
And this does like it says,

00:15:52.816 --> 00:15:54.596 A:middle
it configures the
app's audio session

00:15:54.626 --> 00:15:56.776 A:middle
but does not activate it.

00:15:57.006 --> 00:15:59.726 A:middle
Instead our audio session will
be activated by the system


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.296 --> 00:16:01.396 A:middle
and after that happens,

00:16:01.396 --> 00:16:03.946 A:middle
we'll receive a delegate
call back called Provider

00:16:04.176 --> 00:16:05.496 A:middle
didActivate audioSession.

00:16:06.216 --> 00:16:08.396 A:middle
And this is the point where
we begin processing our

00:16:08.396 --> 00:16:09.036 A:middle
call's audio.

00:16:09.536 --> 00:16:14.876 A:middle
Now the last step is to stop
processing our call's audio

00:16:15.126 --> 00:16:18.416 A:middle
in the PerformEndCallAction
method.

00:16:18.536 --> 00:16:20.206 A:middle
Okay. So that's all
the code we need

00:16:20.206 --> 00:16:23.106 A:middle
to handle an incoming
call using CallKit.

00:16:23.716 --> 00:16:28.066 A:middle
And now I've got on my device
setup to mirror to the screen

00:16:28.526 --> 00:16:32.436 A:middle
and let's build and run
the app on the device.

00:16:32.566 --> 00:16:33.936 A:middle
So for the purpose of this demo,

00:16:33.996 --> 00:16:36.496 A:middle
I'll just simulate an
incoming call using this button

00:16:36.496 --> 00:16:37.056 A:middle
at the bottom.

00:16:37.986 --> 00:16:39.146 A:middle
And now when I press this,

00:16:39.736 --> 00:16:43.126 A:middle
we'll see our call using
Speakerbox presented using the

00:16:43.216 --> 00:16:45.026 A:middle
full screen Native
incoming call UI.

00:16:45.026 --> 00:16:48.076 A:middle
And I can just accept that call

00:16:48.766 --> 00:16:50.766 A:middle
and our ProviderDelegate
receives the

00:16:50.766 --> 00:16:52.846 A:middle
PerformAnswerCallAction method.

00:16:53.326 --> 00:16:56.936 A:middle
It fulfills that and then
finally, when I'm done talking

00:16:56.936 --> 00:17:01.486 A:middle
to Jane I can just end the call
and our app, ProviderDelegate,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:56.936 --> 00:17:01.486 A:middle
to Jane I can just end the call
and our app, ProviderDelegate,

00:17:01.486 --> 00:17:02.346 A:middle
fulfills that as well.

00:17:03.126 --> 00:17:06.326 A:middle
So that's a demo of handling
an incoming call using CallKit.

00:17:06.326 --> 00:17:08.736 A:middle
And I'll now pass
it back to Sirisha.

00:17:09.256 --> 00:17:09.626 A:middle
Thanks.

00:17:10.516 --> 00:17:15.675 A:middle
[ Applause ]

00:17:16.175 --> 00:17:16.866 A:middle
&gt;&gt; Thank you, Stuart.

00:17:17.665 --> 00:17:19.586 A:middle
So let's take a look at
what Stuart just showed us.

00:17:20.286 --> 00:17:22.376 A:middle
So first, we reported
incoming calls

00:17:22.376 --> 00:17:24.806 A:middle
to the system via the report
new incoming call API.

00:17:24.886 --> 00:17:28.146 A:middle
Then we handled an
answer call action

00:17:28.146 --> 00:17:31.576 A:middle
by implementing the delegate
method perform action answer

00:17:31.576 --> 00:17:32.256 A:middle
call action.

00:17:32.826 --> 00:17:35.306 A:middle
Then once we've actually
answered the call, we fulfilled

00:17:35.306 --> 00:17:37.396 A:middle
that action by calling
the fulfill API.

00:17:38.176 --> 00:17:40.686 A:middle
So CallKit can do more
than just answer calls.

00:17:41.236 --> 00:17:43.596 A:middle
Here a list of all our other
actions that we support.

00:17:44.086 --> 00:17:48.296 A:middle
As you can see, there's holds,
group, play DTMF, and many more.

00:17:49.236 --> 00:17:52.786 A:middle
So now let's spend a few seconds
talking about multiple calls.

00:17:53.466 --> 00:17:55.936 A:middle
So say Speakerbox can
handle more than one call.

00:17:56.626 --> 00:17:58.066 A:middle
Right here, in this example,

00:17:58.066 --> 00:18:00.626 A:middle
there's already an active
Speakerbox call going on


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.066 --> 00:18:00.626 A:middle
there's already an active
Speakerbox call going on

00:18:00.756 --> 00:18:02.786 A:middle
and then there's an
incoming call waiting call.

00:18:03.536 --> 00:18:05.686 A:middle
Now if the user wants
to end the active call

00:18:05.686 --> 00:18:08.946 A:middle
and the answer incoming waiting
call from within the Native UI,

00:18:09.576 --> 00:18:12.446 A:middle
the system will send
Speakerbox a CXTransaction.

00:18:12.776 --> 00:18:17.206 A:middle
A CXTransaction is nothing
more than just a list

00:18:17.206 --> 00:18:18.666 A:middle
of one or more actions.

00:18:18.666 --> 00:18:22.306 A:middle
In this case, it's a list
of end and answer actions.

00:18:22.966 --> 00:18:26.016 A:middle
And once Speakerbox has handled
each of these and performed each

00:18:26.016 --> 00:18:28.146 A:middle
of these actions, it
needs to fulfill each

00:18:28.146 --> 00:18:30.576 A:middle
of them individually so
that the system knows

00:18:30.846 --> 00:18:31.856 A:middle
to transition the UI.

00:18:33.476 --> 00:18:34.076 A:middle
All right.

00:18:34.156 --> 00:18:36.466 A:middle
Now I'll hand this
off to Nick to take us

00:18:36.466 --> 00:18:37.606 A:middle
through an outgoing call flow.

00:18:38.516 --> 00:18:41.086 A:middle
[ Applause ]

00:18:41.586 --> 00:18:42.276 A:middle
&gt;&gt; Thanks, Sirisha.

00:18:43.346 --> 00:18:44.746 A:middle
So let's check back
in with Jane.

00:18:45.506 --> 00:18:46.866 A:middle
She talked to her mom yesterday

00:18:47.016 --> 00:18:49.516 A:middle
but today she's feeling a little
homesick and would like to check

00:18:49.516 --> 00:18:50.296 A:middle
in with the home front.

00:18:51.166 --> 00:18:52.976 A:middle
So let's see what it takes
to make an outgoing call.

00:18:57.276 --> 00:19:00.086 A:middle
So the first thing that happens
when Jane goes into recents


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.276 --> 00:19:00.086 A:middle
So the first thing that happens
when Jane goes into recents

00:19:00.086 --> 00:19:03.856 A:middle
and taps to call her mom back is
our app is going to get launched

00:19:03.856 --> 00:19:05.556 A:middle
with a start call intent.

00:19:06.676 --> 00:19:09.826 A:middle
Now some of you may have already
seen the introducing SiriKit

00:19:09.826 --> 00:19:14.096 A:middle
session where we introduced
intents but if you'd

00:19:14.096 --> 00:19:15.236 A:middle
like to find out
more information,

00:19:15.236 --> 00:19:16.766 A:middle
you can always watch
the video online.

00:19:17.846 --> 00:19:20.136 A:middle
In a nutshell though,
an intent is an object

00:19:20.176 --> 00:19:22.236 A:middle
that represents a
desired user action,

00:19:22.706 --> 00:19:24.556 A:middle
is wrapped up in
an NSUser activity,

00:19:24.556 --> 00:19:27.366 A:middle
and then passed back to our app.

00:19:27.576 --> 00:19:30.456 A:middle
So our app has received
the start call intent

00:19:30.686 --> 00:19:33.996 A:middle
and now we've constructed
a start call action based

00:19:33.996 --> 00:19:35.566 A:middle
on the information
on that intent.

00:19:36.756 --> 00:19:37.796 A:middle
We'll take that action

00:19:38.366 --> 00:19:40.686 A:middle
and request it via
the CallController.

00:19:41.986 --> 00:19:44.126 A:middle
The CallController will
then pass that action

00:19:44.126 --> 00:19:47.216 A:middle
through to the system and if
it's accepted, it will come back

00:19:47.316 --> 00:19:49.106 A:middle
to our app via the
ProviderDelegate.

00:19:50.366 --> 00:19:52.316 A:middle
Then finally our app
can take that action

00:19:52.986 --> 00:19:55.786 A:middle
and use the necessary
commands on our network

00:19:56.096 --> 00:19:57.056 A:middle
to make that outgoing call.

00:19:57.676 --> 00:19:59.686 A:middle
So now let's take a
look at the life cycle

00:19:59.686 --> 00:20:01.026 A:middle
of the outgoing call
from this point.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.686 --> 00:20:01.026 A:middle
of the outgoing call
from this point.

00:20:02.116 --> 00:20:04.406 A:middle
So we've just begun performing
the start call action.

00:20:05.156 --> 00:20:07.966 A:middle
So the call is in
a starting state.

00:20:08.126 --> 00:20:10.496 A:middle
From here, we'll finish
executing the action

00:20:10.876 --> 00:20:13.846 A:middle
and fulfill the action to move
the call to a started state.

00:20:15.276 --> 00:20:17.546 A:middle
Then when the remote
side answers the call,

00:20:18.506 --> 00:20:21.916 A:middle
we'll notify the provider that
the call has started connecting.

00:20:23.246 --> 00:20:25.776 A:middle
And then finally,
we'll tell the provider

00:20:25.886 --> 00:20:28.676 A:middle
that the call has connected
to inform the system

00:20:28.676 --> 00:20:30.776 A:middle
that the two parties can
begin talking to each other.

00:20:31.296 --> 00:20:34.296 A:middle
So now I'd like to
bring Stuart back us --

00:20:34.356 --> 00:20:36.276 A:middle
back up to give us another demo.

00:20:37.516 --> 00:20:41.136 A:middle
[ Applause ]

00:20:41.636 --> 00:20:42.096 A:middle
&gt;&gt; Thanks, Nick.

00:20:42.586 --> 00:20:44.676 A:middle
So now I'd like to give
you part two of our demo

00:20:44.676 --> 00:20:46.636 A:middle
of adopting CallKit
and Speakerbox.

00:20:47.066 --> 00:20:49.996 A:middle
This time how to use it to
handle an outgoing call.

00:20:50.966 --> 00:20:54.306 A:middle
I'll open up the Speakerbox
Xscript project again.

00:20:55.266 --> 00:20:57.516 A:middle
Now back in our app
delegate class,

00:20:58.126 --> 00:21:01.626 A:middle
we can see that Speakerbox
already handles being launched


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.126 --> 00:21:01.626 A:middle
we can see that Speakerbox
already handles being launched

00:21:01.736 --> 00:21:03.926 A:middle
with a URL to start a new call.

00:21:04.766 --> 00:21:06.706 A:middle
But when using CallKit,

00:21:06.996 --> 00:21:10.066 A:middle
the process of dialing an
outgoing call is similar

00:21:10.616 --> 00:21:14.326 A:middle
but when the user starts a call
from places like the phone apps,

00:21:14.326 --> 00:21:17.996 A:middle
recents tab, or a
contact card or from Siri,

00:21:17.996 --> 00:21:21.126 A:middle
the app will be launched with
an intent and that will be given

00:21:21.126 --> 00:21:23.246 A:middle
to us via an NSUser activity.

00:21:24.366 --> 00:21:27.656 A:middle
So the first step in
using CallKit here is

00:21:27.656 --> 00:21:31.806 A:middle
to implement the application
continue user activity method.

00:21:32.946 --> 00:21:34.486 A:middle
And taking a look at
what this is doing,

00:21:35.076 --> 00:21:39.236 A:middle
we look at our NSUser
activity and we get the value

00:21:39.236 --> 00:21:40.916 A:middle
of the startCallHandle property.

00:21:41.596 --> 00:21:43.876 A:middle
This is some code we've
already written to look

00:21:43.876 --> 00:21:48.396 A:middle
at the NSUser activity, get the
intent, and return the handle

00:21:48.396 --> 00:21:49.446 A:middle
which is a string

00:21:49.446 --> 00:21:52.576 A:middle
which represents the
person we want to call.

00:21:52.576 --> 00:21:53.626 A:middle
Now once we have our handle,

00:21:54.416 --> 00:21:57.516 A:middle
the process of starting
a new call is identical

00:21:57.516 --> 00:21:58.746 A:middle
to the URL handler above.

00:21:59.096 --> 00:22:02.076 A:middle
We just call the start call
method on our call manager.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.096 --> 00:22:02.076 A:middle
We just call the start call
method on our call manager.

00:22:03.096 --> 00:22:06.746 A:middle
So now let's look at what
this method is doing.

00:22:06.926 --> 00:22:09.406 A:middle
So we can see in the
SpeakerboxCallManager class

00:22:09.906 --> 00:22:12.406 A:middle
that we start a call by
creating a new instance

00:22:12.406 --> 00:22:14.186 A:middle
of our model class,
Speakerbox call,

00:22:15.096 --> 00:22:18.096 A:middle
and then we call the
startSpeakerBoxCall method

00:22:18.476 --> 00:22:20.856 A:middle
which talks to our network
and actually starts that call.

00:22:21.646 --> 00:22:25.136 A:middle
And finally we add this
call to our list of calls.

00:22:26.236 --> 00:22:28.956 A:middle
But now this is not yet using
CallKit to notify the system

00:22:28.956 --> 00:22:30.736 A:middle
about our intention
to start a new call.

00:22:30.786 --> 00:22:31.886 A:middle
And we need to do that.

00:22:32.396 --> 00:22:34.986 A:middle
So I'm going to remove this
code for now and I'm going

00:22:34.986 --> 00:22:36.596 A:middle
to add parts of it back later.

00:22:38.276 --> 00:22:41.736 A:middle
The first step of adopting
CallKit in this class is

00:22:41.736 --> 00:22:42.596 A:middle
to import the framework.

00:22:43.046 --> 00:22:49.086 A:middle
And then I need that second
class which Sirisha mentioned,

00:22:49.166 --> 00:22:50.706 A:middle
the CXCallController class.

00:22:51.176 --> 00:22:55.466 A:middle
And now that I have that,
in our start call method,

00:22:56.706 --> 00:23:00.146 A:middle
I need to create a
startCallAction and configure it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:56.706 --> 00:23:00.146 A:middle
I need to create a
startCallAction and configure it

00:23:00.146 --> 00:23:01.936 A:middle
with the handle that
we want to dial.

00:23:03.216 --> 00:23:06.956 A:middle
Then I create a CXTransaction
containing that action

00:23:08.066 --> 00:23:11.116 A:middle
and finally I call
request transaction

00:23:11.116 --> 00:23:13.316 A:middle
on our callController to
request that from the system.

00:23:13.866 --> 00:23:17.476 A:middle
Now just to reiterate a point
that Sirisha mentioned earlier,

00:23:18.076 --> 00:23:21.166 A:middle
you maybe wondering why we need
to request this transaction

00:23:21.166 --> 00:23:22.526 A:middle
from the system when it seems

00:23:22.526 --> 00:23:24.566 A:middle
like everything that's
happening here is happening

00:23:24.566 --> 00:23:25.176 A:middle
within our own app.

00:23:25.176 --> 00:23:29.216 A:middle
And the reason for that
is that when you attempt

00:23:29.216 --> 00:23:30.336 A:middle
to begin an outgoing call,

00:23:30.556 --> 00:23:33.056 A:middle
there may already be a call
elsewhere on the system.

00:23:33.246 --> 00:23:36.676 A:middle
For instance, if the user is
in a phone or a FaceTime call,

00:23:37.036 --> 00:23:38.546 A:middle
or even a call from
another VoIP app.

00:23:39.196 --> 00:23:41.586 A:middle
If that happens, the
system needs to hold

00:23:41.586 --> 00:23:43.536 A:middle
that call before
your call can begin.

00:23:44.066 --> 00:23:46.566 A:middle
So that's why we need to
request action from the system

00:23:46.836 --> 00:23:48.726 A:middle
to let it know about
those intentions.

00:23:51.096 --> 00:23:53.896 A:middle
So now, once the system receives

00:23:53.896 --> 00:23:57.166 A:middle
and improves our start call
action, it's going to send

00:23:57.166 --> 00:24:00.046 A:middle
that back to our app via
our ProviderDelegate.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.166 --> 00:24:00.046 A:middle
that back to our app via
our ProviderDelegate.

00:24:00.826 --> 00:24:02.416 A:middle
So I need to implement
another method

00:24:02.416 --> 00:24:03.836 A:middle
on our ProviderDelegate class.

00:24:04.776 --> 00:24:08.746 A:middle
This time it's the provider
perform StartCallAction method.

00:24:09.466 --> 00:24:10.606 A:middle
And let's fill this
out together.

00:24:11.996 --> 00:24:14.546 A:middle
So we start same
as we did before

00:24:14.546 --> 00:24:17.226 A:middle
of creating a Speakerbox
call model instance

00:24:17.496 --> 00:24:18.786 A:middle
and configuring it
with the handle

00:24:18.786 --> 00:24:19.766 A:middle
which we're going to dial.

00:24:21.096 --> 00:24:25.016 A:middle
Then we configure our audio
session just like we did

00:24:25.016 --> 00:24:28.286 A:middle
when answering a call
previously and next,

00:24:28.396 --> 00:24:30.956 A:middle
we need to configure a few
properties on our call.

00:24:31.316 --> 00:24:32.896 A:middle
And there's a lot
going on in this one

00:24:32.896 --> 00:24:35.166 A:middle
so let's walk through it.

00:24:35.246 --> 00:24:37.906 A:middle
We set two call back
blocks on our call.

00:24:38.686 --> 00:24:41.056 A:middle
The
hasStartedConnectingDidChange

00:24:41.476 --> 00:24:43.506 A:middle
and hasConnctedDidChange.

00:24:44.326 --> 00:24:47.126 A:middle
These are asynchronous call back
blocks which will be invoked

00:24:47.476 --> 00:24:50.396 A:middle
when the call progresses
to connected and finally

00:24:50.396 --> 00:24:52.176 A:middle
to connecting and
then to connected.

00:24:53.076 --> 00:24:54.686 A:middle
And in these call back blocks,

00:24:55.026 --> 00:24:57.536 A:middle
we report to the system
the progress of the call.

00:24:57.846 --> 00:24:59.656 A:middle
And it allows the system
to be aware of that

00:24:59.656 --> 00:25:02.236 A:middle
and reflect it in the UI.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.656 --> 00:25:02.236 A:middle
and reflect it in the UI.

00:25:02.316 --> 00:25:06.376 A:middle
So with that set, we can now
call the startSpeakerboxCall

00:25:06.376 --> 00:25:07.556 A:middle
method on our call.

00:25:08.146 --> 00:25:09.546 A:middle
And this again, talks
to our network

00:25:09.766 --> 00:25:10.846 A:middle
and it starts it outgoing.

00:25:11.866 --> 00:25:15.276 A:middle
We fulfill the action to
indicate success to the system

00:25:16.076 --> 00:25:18.126 A:middle
and add the call to
the callManager's list.

00:25:18.616 --> 00:25:24.666 A:middle
Okay. So this handles starting
the outgoing call but what

00:25:24.666 --> 00:25:27.116 A:middle
about when the user wants to
end that call and this time

00:25:27.116 --> 00:25:29.276 A:middle
from within our own --
or the app's own UI?

00:25:30.296 --> 00:25:32.296 A:middle
So for that, we need to go back

00:25:32.296 --> 00:25:34.136 A:middle
to our Speakerbox
callManager class

00:25:34.176 --> 00:25:35.186 A:middle
and look at the end method.

00:25:35.926 --> 00:25:37.776 A:middle
And we can see here that just

00:25:37.776 --> 00:25:39.606 A:middle
like the start call
method before,

00:25:40.026 --> 00:25:41.296 A:middle
this is not yet using CallKit.

00:25:42.016 --> 00:25:43.786 A:middle
So I need to replace
it with code that does.

00:25:44.986 --> 00:25:48.756 A:middle
I'll just drag this in and we
can see that this creates an end

00:25:48.756 --> 00:25:51.626 A:middle
to call action and it
wraps it in a transaction

00:25:52.216 --> 00:25:53.866 A:middle
and then requests
that transaction

00:25:53.866 --> 00:25:54.746 A:middle
from the callController.

00:25:56.156 --> 00:25:58.636 A:middle
But this time, we don't need
to do anything further back

00:25:58.636 --> 00:26:01.196 A:middle
in our ProviderDelegate
because as you can see,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.636 --> 00:26:01.196 A:middle
in our ProviderDelegate
because as you can see,

00:26:01.576 --> 00:26:03.776 A:middle
we already implemented
this earlier in the demo.

00:26:04.776 --> 00:26:07.446 A:middle
So that's all the code that we
need to handle an outgoing call

00:26:07.996 --> 00:26:10.006 A:middle
and I'll now build and
run the app on the device.

00:26:10.006 --> 00:26:10.976 A:middle
And give you another demo.

00:26:17.246 --> 00:26:20.176 A:middle
So I've built and updated
the app on the device

00:26:20.456 --> 00:26:22.366 A:middle
but to show you an
outgoing call, I'd actually

00:26:22.366 --> 00:26:26.336 A:middle
like to go back to the phone
app under a contact card.

00:26:26.756 --> 00:26:30.186 A:middle
And we can now see the
Speakerbox app listed right

00:26:30.186 --> 00:26:34.146 A:middle
on the contact card and I just
can tap this to launch our app.

00:26:34.476 --> 00:26:36.706 A:middle
And when we do, our
app will be launched.

00:26:36.966 --> 00:26:38.576 A:middle
It will receive that intent

00:26:39.136 --> 00:26:43.076 A:middle
and it will start a call
using the callController.

00:26:43.436 --> 00:26:46.246 A:middle
It will request a transaction
which will be approved

00:26:46.246 --> 00:26:49.656 A:middle
by the system and fed
to our ProviderDelegate

00:26:49.656 --> 00:26:51.286 A:middle
which will then fulfill
that action.

00:26:51.796 --> 00:26:52.646 A:middle
And here we go.

00:26:52.806 --> 00:26:53.716 A:middle
We just saw that happen.

00:26:54.116 --> 00:26:55.426 A:middle
The call is now active.

00:26:57.276 --> 00:27:00.726 A:middle
So now once the call is
active, if I home out,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.276 --> 00:27:00.726 A:middle
So now once the call is
active, if I home out,

00:27:01.106 --> 00:27:02.036 A:middle
we can see something new.

00:27:02.336 --> 00:27:06.306 A:middle
For the first time, the green
double height status bar is

00:27:06.306 --> 00:27:08.546 A:middle
shown for our app.

00:27:08.976 --> 00:27:11.376 A:middle
Previously this was
reserved for the native phone

00:27:11.376 --> 00:27:13.896 A:middle
and FaceTime calls
only but if I tap this,

00:27:14.256 --> 00:27:15.976 A:middle
we'll be sent right
back to Speakerbox.

00:27:16.516 --> 00:27:19.866 A:middle
[ Applause ]

00:27:20.366 --> 00:27:20.656 A:middle
Thank you.

00:27:21.876 --> 00:27:24.836 A:middle
Then when I'm done
talking, I can end the call

00:27:24.836 --> 00:27:27.956 A:middle
and this will request an end
call action from the system

00:27:28.076 --> 00:27:29.446 A:middle
which our ProviderDelegate
will fulfill.

00:27:30.586 --> 00:27:34.486 A:middle
So that's all demo for handling
an outgoing call using CallKit.

00:27:34.486 --> 00:27:36.936 A:middle
I'll pass it back to
Nick to recap and go

00:27:36.936 --> 00:27:38.376 A:middle
over a few other API details.

00:27:38.736 --> 00:27:38.966 A:middle
Thanks.

00:27:39.516 --> 00:27:43.500 A:middle
[ Applause ]

00:27:46.236 --> 00:27:47.106 A:middle
&gt;&gt; Thanks, Stuart.

00:27:47.906 --> 00:27:50.446 A:middle
So first let's take a quick
look at what we just saw.

00:27:52.996 --> 00:27:56.176 A:middle
The first thing that happened is
Speakerbox received a start call

00:27:56.176 --> 00:27:59.416 A:middle
intent, created a start call
action based on that intent,

00:27:59.976 --> 00:28:01.726 A:middle
and then requested
that start call action.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.976 --> 00:28:01.726 A:middle
and then requested
that start call action.

00:28:02.636 --> 00:28:05.186 A:middle
Then the start call
action was received via the

00:28:05.186 --> 00:28:08.176 A:middle
ProviderDelegate,
executed, and then fulfilled.

00:28:08.216 --> 00:28:12.626 A:middle
And then finally, Speakerbox
reported that the call moved

00:28:12.626 --> 00:28:15.226 A:middle
to connecting and then
finally connected.

00:28:15.736 --> 00:28:22.866 A:middle
So, now that we've seen a few
basic flows let's dive into some

00:28:22.866 --> 00:28:24.646 A:middle
of the details of the
API to really round

00:28:24.646 --> 00:28:25.706 A:middle
out our usage of CallKit.

00:28:25.706 --> 00:28:30.816 A:middle
And in particular, we'll take a
look the provider authorization

00:28:30.816 --> 00:28:33.266 A:middle
and configuration to
help customize our app

00:28:33.416 --> 00:28:34.046 A:middle
in the native UI.

00:28:35.046 --> 00:28:37.396 A:middle
We'll take a look at how
to handle action errors

00:28:37.706 --> 00:28:40.586 A:middle
and system restrictions and
then finally, we'll take a look

00:28:40.586 --> 00:28:47.286 A:middle
at how CallKit plays a role in
our call's audio on our app.

00:28:47.526 --> 00:28:51.946 A:middle
So as with other APIs like
contacts and core location,

00:28:52.646 --> 00:28:54.816 A:middle
CallKit requires permission
from the user to use.

00:28:55.456 --> 00:28:57.386 A:middle
And because of this,
one of the first things

00:28:57.386 --> 00:29:00.706 A:middle
that your app should do when it
launches is check its current


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.386 --> 00:29:00.706 A:middle
that your app should do when it
launches is check its current

00:29:00.706 --> 00:29:01.716 A:middle
authorization status.

00:29:02.666 --> 00:29:05.006 A:middle
This may have changed since the
last time your app was launched.

00:29:05.256 --> 00:29:06.826 A:middle
If the user went into settings

00:29:06.826 --> 00:29:08.376 A:middle
and maybe enabled or
disabled your app.

00:29:09.766 --> 00:29:11.556 A:middle
Then from here, if you discover

00:29:11.556 --> 00:29:13.746 A:middle
that your app's authorization
status has not

00:29:13.746 --> 00:29:16.906 A:middle
yet been determined, you
should request authorization

00:29:16.906 --> 00:29:17.466 A:middle
for your app.

00:29:18.346 --> 00:29:21.236 A:middle
And what this does is it tells
the system to display an alert

00:29:21.236 --> 00:29:23.106 A:middle
to the user to request
permission.

00:29:23.106 --> 00:29:26.986 A:middle
And this is done on behalf of
your app and because it's done

00:29:26.986 --> 00:29:29.046 A:middle
on behalf of your app,
you should always be sure

00:29:29.206 --> 00:29:35.446 A:middle
to include an informative usage
string in your app's info.plist.

00:29:35.596 --> 00:29:37.506 A:middle
And lastly while
your app is launched,

00:29:38.066 --> 00:29:39.886 A:middle
you should always be sure
to observe and listen

00:29:40.336 --> 00:29:42.856 A:middle
to any authorization status
changes that may happen

00:29:43.796 --> 00:29:46.846 A:middle
so that you can always show the
most up-to-date UI to your user.

00:29:49.676 --> 00:29:52.156 A:middle
So now let's talk about
the provider configuration.

00:29:52.756 --> 00:29:55.766 A:middle
So the provider configuration
is a way for your app

00:29:55.876 --> 00:29:59.196 A:middle
to customize its in
call experience directly

00:29:59.196 --> 00:30:00.446 A:middle
in the Native and Call UI.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.196 --> 00:30:00.446 A:middle
in the Native and Call UI.

00:30:00.766 --> 00:30:06.436 A:middle
Some of the things that can
be customized are your app's

00:30:06.436 --> 00:30:08.566 A:middle
localized name to
display for your calls.

00:30:09.816 --> 00:30:11.596 A:middle
This also includes
certain capabilities

00:30:11.596 --> 00:30:14.326 A:middle
such as whether your app
supports video calling.

00:30:15.046 --> 00:30:16.766 A:middle
And this even includes things

00:30:16.766 --> 00:30:21.146 A:middle
like specifying your own masked
image icon to show directly

00:30:21.146 --> 00:30:22.676 A:middle
in one of the buttons
of the end call UI.

00:30:23.616 --> 00:30:28.436 A:middle
And when tapped, this will take
the user directly to your app.

00:30:28.436 --> 00:30:30.106 A:middle
Just a note though
that this support

00:30:30.106 --> 00:30:31.926 A:middle
for this app icon
will be available

00:30:31.926 --> 00:30:32.826 A:middle
in a future seed [phonetic].

00:30:33.356 --> 00:30:39.416 A:middle
So we've taken a look at what
happens when things go smoothly

00:30:39.416 --> 00:30:41.216 A:middle
when executing actions
but what happens

00:30:41.216 --> 00:30:42.526 A:middle
when we run into a problem?

00:30:43.476 --> 00:30:45.736 A:middle
Well take a look at the
outgoing example from before.

00:30:46.726 --> 00:30:50.166 A:middle
We've just started performing
the start call action.

00:30:50.966 --> 00:30:52.236 A:middle
Let's say that in the process

00:30:52.236 --> 00:30:54.346 A:middle
of performing that,
we run into an error.

00:30:55.056 --> 00:30:56.666 A:middle
Maybe we don't have
good connectivity

00:30:56.666 --> 00:30:57.726 A:middle
with our network server,

00:30:57.726 --> 00:30:59.446 A:middle
so we can't actually
make the outgoing call.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.866 --> 00:31:04.616 A:middle
Well in this case, we should
fail the start call action.

00:31:05.356 --> 00:31:09.486 A:middle
And the reason this is important
is because it informs a system

00:31:09.486 --> 00:31:10.556 A:middle
that something went wrong.

00:31:11.126 --> 00:31:12.936 A:middle
And then the system
can, in turn,

00:31:13.756 --> 00:31:16.716 A:middle
inform the user via things
like call failure UI.

00:31:17.516 --> 00:31:22.716 A:middle
And along with these action
errors are action time outs.

00:31:24.056 --> 00:31:27.226 A:middle
So each action on the
system has a particular time

00:31:27.226 --> 00:31:28.266 A:middle
out associated with it.

00:31:28.966 --> 00:31:31.606 A:middle
And these time outs are
important because they assure

00:31:31.606 --> 00:31:35.306 A:middle
that actions initiated
by the user are performed

00:31:35.696 --> 00:31:38.446 A:middle
in a performance and
responsive manner.

00:31:39.516 --> 00:31:42.436 A:middle
So because of this, your
app should always be sure

00:31:42.436 --> 00:31:45.476 A:middle
to perform those actions
in a timely manner.

00:31:46.856 --> 00:31:49.386 A:middle
However, if an action
does time out,

00:31:50.186 --> 00:31:53.746 A:middle
your app will be notified via
an appropriate provider delegate

00:31:53.746 --> 00:31:55.976 A:middle
method at which point it
can react appropriately.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.516 --> 00:32:03.126 A:middle
So based on the current
state of the device,

00:32:03.466 --> 00:32:05.926 A:middle
certain system restrictions
may be in place.

00:32:06.926 --> 00:32:09.366 A:middle
And we'll take a look at an
incoming call as an example.

00:32:10.726 --> 00:32:13.196 A:middle
One of the reasons
why your calls --

00:32:13.656 --> 00:32:17.836 A:middle
your app's incoming call
might be denied is, perhaps,

00:32:17.836 --> 00:32:21.606 A:middle
the user has disabled your app
and it's no longer authorized.

00:32:22.766 --> 00:32:25.646 A:middle
Or maybe the remote caller
for the incoming call is

00:32:25.646 --> 00:32:26.896 A:middle
in the user's blocked list.

00:32:27.706 --> 00:32:30.996 A:middle
Or perhaps the user has enabled
do not disturb and doesn't want

00:32:30.996 --> 00:32:34.876 A:middle
to see any incoming calls
at the current time.

00:32:35.086 --> 00:32:36.456 A:middle
Well for all of these cases,

00:32:37.186 --> 00:32:40.586 A:middle
you app will be notified via
completion handlers on the API.

00:32:42.096 --> 00:32:42.766 A:middle
For example,

00:32:42.766 --> 00:32:45.996 A:middle
the reportNewIncomingCall
API passes back an error

00:32:45.996 --> 00:32:47.116 A:middle
in its completion handler.

00:32:47.476 --> 00:32:51.686 A:middle
And as you can see here,
our app checks the error

00:32:51.686 --> 00:32:52.326 A:middle
that's returned.

00:32:53.146 --> 00:32:56.006 A:middle
Sees that the error code is
filtered by do not disturb

00:32:56.006 --> 00:32:57.976 A:middle
and then handles
that appropriately.

00:32:59.316 --> 00:33:02.186 A:middle
So now let's take a look
at audio with CallKit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.316 --> 00:33:02.186 A:middle
So now let's take a look
at audio with CallKit.

00:33:03.606 --> 00:33:06.616 A:middle
So with CallKit your app
gets a lot of great benefits

00:33:06.616 --> 00:33:07.956 A:middle
with its call's audio.

00:33:08.376 --> 00:33:10.746 A:middle
And one of the biggest
benefits it gets is

00:33:10.746 --> 00:33:13.886 A:middle
that its audio session will
be at a boosted priority

00:33:13.886 --> 00:33:17.466 A:middle
on the system on par with
phone and FaceTime calls.

00:33:18.136 --> 00:33:20.026 A:middle
And what this means
is other apps

00:33:20.026 --> 00:33:21.666 A:middle
on the system will not be able

00:33:21.666 --> 00:33:23.476 A:middle
to interrupt your
app's call audio.

00:33:24.006 --> 00:33:27.946 A:middle
And in addition to
this, CallKit is aware

00:33:27.946 --> 00:33:30.076 A:middle
of certain audio routing
hints on this system

00:33:30.826 --> 00:33:34.736 A:middle
which means it can decide where
to route audio based on things

00:33:34.736 --> 00:33:37.906 A:middle
like the user's current
accessibility settings

00:33:37.976 --> 00:33:40.376 A:middle
or currently connected
Bluetooth devices.

00:33:40.826 --> 00:33:46.646 A:middle
Let's take a look at an incoming
call flow as an example.

00:33:47.426 --> 00:33:48.686 A:middle
We know that, at some point,

00:33:48.686 --> 00:33:52.006 A:middle
during an incoming call our
app will receive an answer call

00:33:52.006 --> 00:33:54.556 A:middle
action and then fulfill
that answer call action.

00:33:55.576 --> 00:33:58.626 A:middle
Well after receiving the answer
call action is a great time

00:33:58.756 --> 00:34:00.886 A:middle
to configure our audio session.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.756 --> 00:34:00.886 A:middle
to configure our audio session.

00:34:01.376 --> 00:34:02.276 A:middle
And that's because we know

00:34:02.276 --> 00:34:03.976 A:middle
that the call will
soon move to connected.

00:34:05.456 --> 00:34:07.626 A:middle
Then when we fulfill
the answer call action,

00:34:08.746 --> 00:34:11.496 A:middle
the system will automatically
start an audio session

00:34:11.846 --> 00:34:14.196 A:middle
for our app at a
boosted priority

00:34:14.815 --> 00:34:15.876 A:middle
and then let our app know

00:34:15.876 --> 00:34:19.286 A:middle
that this has happened via
the did activate audio session

00:34:19.286 --> 00:34:20.376 A:middle
provider delegate call back.

00:34:20.616 --> 00:34:24.386 A:middle
And this is an indication
to our app that it is time

00:34:24.386 --> 00:34:26.036 A:middle
to start media for the call.

00:34:26.036 --> 00:34:29.406 A:middle
So that was just a quick look at
some of the details of the API

00:34:30.076 --> 00:34:32.626 A:middle
to help us complete our
adoption of CallKit.

00:34:37.446 --> 00:34:40.306 A:middle
So now we invite
you to adopt CallKit

00:34:40.536 --> 00:34:43.565 A:middle
in your existing VoIP apps
or to build a new VoIP app

00:34:43.565 --> 00:34:45.246 A:middle
from the ground up
using CallKit.

00:34:46.505 --> 00:34:48.786 A:middle
With CallKit you'll
integrate directly

00:34:48.786 --> 00:34:50.906 A:middle
into the system's
calling infrastructure

00:34:51.815 --> 00:34:54.976 A:middle
and once you've adopted CallKit
you'll maintain feature parity

00:34:55.255 --> 00:34:56.896 A:middle
with native calling services.

00:34:58.086 --> 00:34:59.016 A:middle
But most importantly,

00:34:59.696 --> 00:35:03.126 A:middle
with CallKit your app will
increase its visibility


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.696 --> 00:35:03.126 A:middle
with CallKit your app will
increase its visibility

00:35:03.176 --> 00:35:06.136 A:middle
across the system whether
it's with full screen,

00:35:06.136 --> 00:35:10.116 A:middle
incoming alerts on the locked
screen, appearances in recents,

00:35:10.446 --> 00:35:14.576 A:middle
favorites, and contacts,
or integration with Siri,

00:35:14.936 --> 00:35:16.886 A:middle
CarPlay, and Bluetooth.

00:35:19.066 --> 00:35:21.816 A:middle
For more information you can
check out our session's webpage

00:35:21.816 --> 00:35:23.116 A:middle
at developer.apple.com

00:35:23.596 --> 00:35:26.016 A:middle
where we'll also have the
Speakerbox sample code

00:35:26.016 --> 00:35:27.916 A:middle
that we've been referencing
throughout this presentation.

00:35:28.426 --> 00:35:31.856 A:middle
We've got a lot of great
related sessions for you.

00:35:32.486 --> 00:35:35.666 A:middle
So be sure to check out more
information about Siri, intents,

00:35:36.006 --> 00:35:37.156 A:middle
networking, and audio.

00:35:38.556 --> 00:35:40.196 A:middle
Thank you all so
much for joining us

00:35:40.226 --> 00:35:40.976 A:middle
and we'll see you in the labs.

00:35:41.516 --> 00:35:44.500 A:middle
[ Applause ]


